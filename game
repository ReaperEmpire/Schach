import pygame
import sys
import random
from button import Button


pygame.init()

xres = 1280
yres = 800
buttonxres = 100
buttonyres = 100

Weiß = (255, 255, 255)
Grün = (118, 238, 0)
Schwarz = (0, 0, 0)


class Game:
    def __init__(self):
        self.spielbrett = [
            ["sT", "sS", "sL", "sQ", "sK", "sL", "sS", "sT"],
            ["sB", "sB", "sB", "sB", "sB", "sB", "sB", "sB"],
            ["-", "-", "-", "-", "-", "-", "-", "-"],
            ["-", "-", "-", "-", "-", "-", "-", "-"],
            ["-", "-", "-", "-", "-", "-", "-", "-"],
            ["-", "-", "-", "-", "-", "-", "-", "-"],
            ["wB", "wB", "wB", "wB", "wB", "wB", "wB", "wB"],
            ["wT", "wS", "wL", "wQ", "wK", "wL", "wS", "wT"]]

        self.powerUpSpielbrett = [
            ["-", "-", "-", "-", "-", "-", "-", "-"],
            ["-", "-", "-", "-", "-", "-", "-", "-"],
            ["-", "-", "-", "-", "-", "-", "-", "-"],
            ["-", "-", "-", "-", "-", "-", "-", "-"],
            ["-", "-", "-", "-", "-", "-", "-", "-"],
            ["-", "-", "-", "-", "-", "-", "-", "-"],
            ["-", "-", "-", "-", "-", "-", "-", "-"],
            ["-", "-", "-", "-", "-", "-", "-", "-"]]

        self.weisZug = True
        self.moveLog = []
        self.schwarzeFiguren = ["sT", "sS", "sL", "sQ", "sK", "sB"]
        self.weisseFiguren = ["wT", "wS", "wL", "wQ", "wK", "wB"]
        self.powerUps = ["Pr", "Sn", "Ro", "Fs", "Rö"]
        self.runde = 1
        self.randomPowerUp = [1, 2, 3, 4]
        self.randomListe = [0,1,2,3,4,5,6,7]
        self.powerUp1Weis = ""
        self.powerUp1Schwarz = ""
        self.powerUp1Status = False
        self.powerUp2Weis = ""
        self.powerUp2Schwarz = ""
        self.powerUp2Status = False

        self.auswahlgetroffen = True


    def Move(self, move):
        self.figurBewegt=self.spielbrett[move.startZeile][move.startSpalte]
        self.figurGeschlagen=self.spielbrett[move.endZeile][move.endSpalte]
        self.moveLog.append(str(move.startZeile))
        self.moveLog.append(str(move.startSpalte))
        self.moveLog.append(str(move.endZeile))
        self.moveLog.append(str(move.endSpalte))
        print(self.figurGeschlagen)
        if self.figurGeschlagen in self.schwarzeFiguren or self.figurGeschlagen in self.weisseFiguren:
            for z in range(len(self.spielbrett)):
                for s in range(len(self.spielbrett[z])):
                    print("PowerUpSpawnt")

                    self.z = random.choice(self.randomListe)
                    self.s = random.choice(self.randomListe)
                    self.p = random.choice(self.randomPowerUp)

                    if self.spielbrett[self.z][self.s] == "-":
                        print(self.z)
                        print(self.s)
                        self.spielbrett[self.z][self.s] = self.powerUps[self.p]
                        break
                    break
                break

#PowerUp wird aufgesammelt und der jeweiligen Variable zugeordnet

        if self.figurGeschlagen in self.powerUps:
            if self.weisZug:
                if self.powerUp1Weis != "":
                    self.powerUp2Weis = self.figurGeschlagen
                else:
                    self.powerUp1Weis = self.figurGeschlagen
            else:
                if self.powerUp1Schwarz != "":
                    self.powerUp2Schwarz = self.figurGeschlagen
                else:
                    self.powerUp1Schwarz = self.figurGeschlagen

        if self.powerUp1Status or self.powerUp2Status:

            # Hier wird das Snipe PowerUp Gelöscht falls Weis es eingesetzt hat

            if self.powerUp1Weis == "Sn" and self.weisZug and self.powerUp1Status:
                self.powerUp1Weis = ""

            if self.powerUp2Weis == "Sn" and self.weisZug and self.powerUp2Status:
                self.powerUp2Weis = ""

            #Hier wird das Snipe PowerUp Gelöscht falls Schwarz es eingesetzt hat

            if self.powerUp1Schwarz == "Sn" and not self.weisZug and self.powerUp1Schwarz:
                self.powerUp1Schwarz = ""

            if self.powerUp2Schwarz == "Sn" and not self.weisZug and self.powerUp2Schwarz:
                self.powerUp2Schwarz = ""







        # Hier wird die Startfigur letztendlich gesetzt
        self.spielbrett[move.endZeile][move.endSpalte] = self.spielbrett[move.startZeile][move.startSpalte]
        self.spielbrett[move.startZeile][move.startSpalte] = "-"

        if self.spielbrett[move.endZeile][move.endSpalte][1] == "B" and move.endZeile == 7 or move.endZeile == 0:
            self.auswahlgetroffen = False




        # Gewinnbedingung
        if self.figurGeschlagen.__contains__('K'):
            if self.weisZug:
                print("Weiß hat gewonnen.")
            else:
                print("Schwarz hat gewonnen.")

        self.weisZug = not self.weisZug
        if self.weisZug:
            print("Weiß ist am Zug.")
        else:
            print("Schwarz ist am Zug.")

# Moves und die Validität

    def machbareZüge(self):
        return self.verfügbareZüge()

    def verfügbareZüge(self):
        moves = []
        for r in range(len(self.spielbrett)):
            for c in range(len(self.spielbrett[r])):
                color = self.spielbrett[r][c][0]
                if(color == 'w' and self.weisZug) or (color == 's' and not self.weisZug):
                    if self.spielbrett[r][c] != "-":
                        if self.spielbrett[r][c] in self.weisseFiguren or self.spielbrett[r][c] in self.schwarzeFiguren:
                            figur = self.spielbrett[r][c][1]
                            if figur == "B":
                                self.bauermoves(r, c, moves)
                            if figur == "T":
                                self.turmmoves(r, c, moves)
                            if figur == "L":
                                self.läufermoves(r, c, moves)
                            if figur == "S":
                                self.springermoves(r, c, moves)
                            if figur == "Q":
                                self.königinmoves(r, c, moves)
                            if figur == "K":
                                self.königmoves(r, c, moves)

                        # Hier wird das Snipe-PowerUp durchgeführt
                        if self.powerUp1Status or self.powerUp2Status:
                            if self.powerUp1Weis == "Sn":
                                self.königinmoves(r, c, moves)

                            if self.powerUp1Schwarz == "Sn":
                                self.königinmoves(r, c, moves)

                            if self.powerUp2Weis == "Sn":
                                self.königinmoves(r, c, moves)

                            if self.powerUp2Schwarz == "Sn":
                                self.königinmoves(r, c, moves)
                                # print("Wurde erreicht")










        return moves

    def bauermoves(self,r,c,moves):
        if self.weisZug:
            if r+1 in range(len(self.spielbrett[r])) and self.spielbrett[r-1][c] == "-":
                self.startSpalte = r
                self.startZeile = c
                self.endSpalte = r - 1
                self.endZeile = c
                self.verfügbarerZug = self.startSpalte * 1000 + self.startZeile * 100 + self.endSpalte * 10 + self.endZeile
                moves.append(self.verfügbarerZug)
            if r ==6:
                self.startSpalte = r
                self.startZeile = c
                self.endSpalte = r-2
                self.endZeile = c
                self.verfügbarerZug = self.startSpalte*1000 + self.startZeile*100 + self.endSpalte*10 + self.endZeile
                moves.append(self.verfügbarerZug)
            if c+1 in range(len(self.spielbrett[r])) and self.spielbrett[r-1][c+1] != "-":
                if self.spielbrett[r - 1][c - 1] not in self.weisseFiguren:
                    self.startSpalte = r
                    self.startZeile = c
                    self.endSpalte = r - 1
                    self.endZeile = c + 1
                    self.verfügbarerZug = self.startSpalte * 1000 + self.startZeile * 100 + self.endSpalte * 10 + self.endZeile
                    moves.append(self.verfügbarerZug)
            if c-1 in range(len(self.spielbrett[r])) and self.spielbrett[r - 1][c - 1] != "-":
                if self.spielbrett[r - 1][c - 1] not in self.weisseFiguren:
                    self.startSpalte = r
                    self.startZeile = c
                    self.endSpalte = r - 1
                    self.endZeile = c - 1
                    self.verfügbarerZug = self.startSpalte * 1000 + self.startZeile * 100 + self.endSpalte * 10 + self.endZeile
                    moves.append(self.verfügbarerZug)



        if not self.weisZug:
            if r+1 in range(len(self.spielbrett[r])) and self.spielbrett[r+1][c] == "-":
                self.startSpalte = r
                self.startZeile = c
                self.endSpalte = r + 1
                self.endZeile = c
                self.verfügbarerZug = self.startSpalte * 1000 + self.startZeile * 100 + self.endSpalte * 10 + self.endZeile
                moves.append(self.verfügbarerZug)
            if r == 1 and self.spielbrett[r + 2][c] == "-":
                self.startSpalte = r
                self.startZeile = c
                self.endSpalte = r +2
                self.endZeile = c
                self.verfügbarerZug = self.startSpalte * 1000 + self.startZeile * 100 + self.endSpalte * 10 + self.endZeile
                moves.append(self.verfügbarerZug)
            if c+1 in range(len(self.spielbrett[r])) and self.spielbrett[r+1][c+1] != "-":
                self.startSpalte = r
                self.startZeile = c
                self.endSpalte = r + 1
                self.endZeile = c + 1
                self.verfügbarerZug = self.startSpalte * 1000 + self.startZeile * 100 + self.endSpalte * 10 + self.endZeile
                moves.append(self.verfügbarerZug)
            if c-1 in range(len(self.spielbrett[r])) and self.spielbrett[r+1][c-1] != "-":
                self.startSpalte = r
                self.startZeile = c
                self.endSpalte = r + 1
                self.endZeile = c - 1
                self.verfügbarerZug = self.startSpalte * 1000 + self.startZeile * 100 + self.endSpalte * 10 + self.endZeile
                moves.append(self.verfügbarerZug)

    def turmmoves(self,r,c,moves):
        pos = ((0, 1), (1, 0), (0, -1), (-1, 0))
        f = (1,2,3,4,5,6,7,8)
        if self.weisZug:
            self.gegnerfarbe = 's'
        else:
            self.gegnerfarbe = 'w'

        for z in pos:
            self.startSpalte = r
            self.startZeile = c
            for a in f:
                self.endSpalte = z[0]*a+r
                self.endZeile = z[1]*a+c
                if self.endSpalte >= 8 or self.endZeile >= 8:
                    break
                else:
                    if self.endSpalte < 0 or self.endZeile < 0:
                        break
                    else:
                        if self.spielbrett[self.endSpalte][self.endZeile] == "-":
                            self.verfügbarerZug = self.startSpalte * 1000 + self.startZeile * 100 + self.endSpalte * 10 + self.endZeile
                            moves.append(self.verfügbarerZug)
                        elif self.spielbrett[self.endSpalte][self.endZeile][0] == self.gegnerfarbe or self.spielbrett[self.endSpalte][self.endZeile] in self.powerUps:
                            self.verfügbarerZug = self.startSpalte * 1000 + self.startZeile * 100 + self.endSpalte * 10 + self.endZeile
                            moves.append(self.verfügbarerZug)
                            break
                        else:
                            break

    def läufermoves(self, r, c, moves):

            pos = ((1, 1), (-1, -1), (-1, 1), (1, -1))
            f = (1, 2, 3, 4, 5, 6, 7, 8)
            if self.weisZug:
                self.gegnerfarbe = 's'
            else:
                self.gegnerfarbe = 'w'

            for z in pos:
                self.startSpalte = r
                self.startZeile = c
                for a in f:
                    self.endSpalte = z[0] * a + r
                    self.endZeile = z[1] * a + c
                    if self.endSpalte >= 8 or self.endZeile >= 8:
                        break
                    else:
                        if self.endSpalte < 0 or self.endZeile < 0:
                            break
                        else:
                            if self.spielbrett[self.endSpalte][self.endZeile] == "-":
                                self.verfügbarerZug = self.startSpalte * 1000 + self.startZeile * 100 + self.endSpalte * 10 + self.endZeile
                                moves.append(self.verfügbarerZug)
                            elif self.spielbrett[self.endSpalte][self.endZeile][0] == self.gegnerfarbe or self.spielbrett[self.endSpalte][self.endZeile] in self.powerUps:
                                self.verfügbarerZug = self.startSpalte * 1000 + self.startZeile * 100 + self.endSpalte * 10 + self.endZeile
                                moves.append(self.verfügbarerZug)
                                break
                            else:
                                break

    def springermoves(self, r, c, moves):
        pos = ((1, 2), (2, 1), (-1, 2), (2, -1), (2, -1), (1, -2), (-1, -2), (-2, -1), (-1, 2), (-2, 1))

        if self.weisZug:
            self.gegnerfarbe = 's'
        else:
            self.gegnerfarbe = 'w'

        self.startSpalte = r
        self.startZeile = c

        for z in pos:

            self.endSpalte = r + z[0]
            self.endZeile = c + z[1]
            if 0 <= self.endSpalte < 8 and 0 <= self.endZeile < 8:
                if self.spielbrett[self.endSpalte][self.endZeile][0] == self.gegnerfarbe or self.spielbrett[self.endSpalte][self.endZeile] in self.powerUps or self.spielbrett[self.endSpalte][self.endZeile] == "-":
                    self.verfügbarerZug = self.startSpalte * 1000 + self.startZeile * 100 + self.endSpalte * 10 + self.endZeile
                    moves.append(self.verfügbarerZug)

    def königinmoves(self, r, c, moves):
        self.läufermoves(r, c, moves)
        self.turmmoves(r, c, moves)

    def königmoves(self, r, c, moves):
        pos = ((1, 1), (-1, -1), (-1, 1), (1, -1), (0, 1), (1, 0), (0, -1), (-1, 0))
        self.startSpalte = r
        self.startZeile = c
        for z in pos:
            self.endSpalte = z[0] + r
            self.endZeile = z[1] + c
            if 0 <= self.endSpalte < 8 and 0 <= self.endZeile < 8:
                if self.spielbrett[self.endSpalte][self.endZeile][0] != self.spielbrett[r][c][0] or self.spielbrett[self.endSpalte][self.endZeile] in self.powerUps:
                    self.verfügbarerZug = self.startSpalte * 1000 + self.startZeile * 100 + self.endSpalte * 10 + self.endZeile
                    moves.append(self.verfügbarerZug)

# PowerUps
    def powerUpDetected(self):
        pass






'''
        for z in range(len(self.spielbrett[r])):
            self.startSpalte = r
            self.startZeile = c
            self.endSpalte = len(self.spielbrett)
            self.endZeile = len(self.spielbrett)
            self.verfügbarerZug = self.startSpalte * 1000 + self.startZeile * 100 + self.endSpalte * 10 + self.endZeile
            moves.append(self.verfügbarerZug)
'''



class figurenBewegung():
    def __init__(self, startBu, endBu, spielbrett):
        self.startSpalte = startBu[0]
        self.startZeile = startBu[1]
        self.endSpalte = endBu[0]
        self.endZeile = endBu[1]


        self.figurBewegt = spielbrett[self.startZeile][self.startSpalte]
        self.figurGeschlagen = spielbrett[self.endZeile][self.endSpalte]






        self.figurBewegungID = self.startZeile*1000 + self.startSpalte*100 + self.endZeile*10 + self.endSpalte


        # ranksToRows = {"1": 7, "2":6, "3": 5, "4": 4, "5": 3, "6": 2, "7": 1, "8": 0}
        # rowsToRanks = {v: k for k, v in ranksToRows.items()}
        # filesToCols = {"a": 0, "b": 1, "c": 2, "d": 3, "e": 4, "f": 5, "g": 6, "h": 7}
        # colsToFiles = {v: k for k, v in filesToCols.items()}

    def __eq__(self, other):
        if isinstance(other, figurenBewegung):
            return self.figurBewegungID == other.figurBewegungID
        return False
